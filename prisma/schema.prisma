// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  sid       String
  data      String
  expiresAt DateTime @map("expires_at")

  @@index([sid], name: "idx_sid")
  @@index([expiresAt], name: "idx_expires_at")
}

model User {
  id           String         @id @default(uuid()) @map("_id")
  fullName     String
  address      String?
  email        String         @unique
  password     String
  userType     UserType
  languages    String[]
  image        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tourGuide    TourGuide?
  reviews      Review[]       @relation("touristReviews")
  tourPlans    TourPlan[]
  // PlanTour  PlanTour[]
  Notification Notification?
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model TourGuide {
  id             String    @id @default(uuid()) @map("_id")
  userId         String    @unique
  location       String?
  offerRange     Int?
  aboutMe        String?
  motto          String?
  thingsToDo     String[]
  summary        String?
  tourHighlights String[]
  user           User      @relation(fields: [userId], references: [id])
  reviews        Review[]  @relation("guideReviews")
  rating         String?
  TourPlan       TourPlan? @relation(fields: [tourPlanId], references: [id])
  tourPlanId     String?
}

model Review {
  id          String    @id @default(uuid()) @map("_id")
  touristId   String
  tourGuideId String
  tourist     User      @relation(fields: [touristId], references: [id], name: "touristReviews")
  tourGuide   TourGuide @relation(fields: [tourGuideId], references: [id], name: "guideReviews")
  rating      Int
  remark      String
  createdAt   DateTime  @default(now())
}

model TourPlan {
  id              String         @id @default(uuid()) @map("_id")
  touristId       String
  location        String
  startDate       DateTime
  endDate         DateTime
  adults          Int            @default(0)
  children        Int            @default(0)
  infants         Int            @default(0)
  pets            Int            @default(0)
  guidePreference String
  // tourGuide       TourGuide?  @relation(fields: [guidePreference], references: [id])
  tourist         User?          @relation(fields: [touristId], references: [id])
  createdAt       DateTime       @default(now())
  TourGuide       TourGuide[]
  paymentStatus   PaymentStatus  @default(PENDING)
  notifications   Notification[]
}

model Notification {
  id         String   @id @default(uuid()) @map("_id")
  userId     String   @unique
  tourPlanId String   @unique
  type       String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  tourPlan TourPlan @relation(fields: [tourPlanId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserType {
  TOURIST
  TOUR_GUIDE
}
